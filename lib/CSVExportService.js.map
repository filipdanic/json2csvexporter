{"version":3,"file":"CSVExportService.js","sources":["../src/WriterService.js","../src/CSVExportService.js"],"sourcesContent":["/**\n * Provides an interface for mapping JS data types to a delimiter-separated value.\n * Creates a list of lists called rows and maps it to a Blob via toBlob().\n */\nexport default class WriterService {\n\n  /**\n   * Default constructors. Takes two optional params.\n   * @param  {string} delimiter - Delimiter character(s) to be used in the CSV.\n   * @param  {string} contentType - Type of file.\n   */\n  constructor(delimiter = ',', contentType = 'text/csv') {\n    this.delimiter = delimiter;\n    this.contentType = contentType;\n    this.rows = [[]];\n  }\n\n  /**\n   * Returns the current row\n   * @return {Array} - An array of values.\n   */\n  get currentRow() {\n    return this.rows[this.rows.length - 1];\n  }\n\n  /**\n   * Returns the input string\n   * @param  {string} string - The input string.\n   * @return {string} - A safe strings wrapped in quotes.\n   */\n  wrapWithQuotes(string) {\n    const safeString = string.replace(/\"/g, '\"\"');\n    return `\"${safeString}\"`;\n  }\n\n  /**\n   * @param {*} value\n   * @return {string}\n   */\n  sanitizeValue(value) {\n    if (\n      value === undefined ||\n      value === null ||\n      typeof value === 'function'\n    ) {\n      return '';\n    }\n    return String(value);\n  }\n\n  /**\n   * Pushes a new value into the current row.\n   * @param  {*} value - The value to push.\n   */\n  writeValue(value) {\n    const stringValue = this.sanitizeValue(value);\n    const needsQuotes = stringValue.indexOf(this.delimiter) !== -1 || /\"\\r\\n/.test(stringValue);\n    this.currentRow.push(needsQuotes ? this.wrapWithQuotes(stringValue) : stringValue);\n  }\n\n  /**\n   * Adds a en empty array to rows property. This maps to an empty line.\n   */\n  writeLine() {\n    this.rows.push([]);\n  }\n\n  /**\n   * Flatten rows to a String.\n   * @return {string} - A string representation of the rows..\n   */\n  toString() {\n    return this.rows.map(row => {\n      return row.join(this.delimiter);\n    }).reduce((content, row) => {\n      return `${content}\\r\\n${row}`;\n    });\n  }\n\n  /**\n   * Transform the rows into a Blob.\n   * @return {Object} - A representation of the rows in the form of\n   * a Blob. The returned Object is an instance of Blob, but typeof Object.\n   */\n  toBlob() {\n    return new Blob([this.toString()], {type: this.contentType});\n  }\n}\n","import WriterService from './WriterService';\n/**\n * Provides an ExportService that uses WriterService to mentain an in-memory representation of the CSV file.\n * Uses downloadCSV to map the [data] via the Writer to a Blob and initiate download which triggers the download of the actual file in the browser.\n * Provides static methods for Singleton-like usage.\n */\nexport default class CSVExportService {\n  /**\n   * Default constructor. Takes an optional options param.\n   * @param  {Object} options - Provides the configuration options.\n   */\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  /**\n   * Shorthand for createCSV() with a pre-set writerType\n  */\n  createCSVBlob(data) {\n    return this.createCSV(data);\n  }\n\n  /**\n    * Shorthand for createCSV() with a pre-set writerType\n  */\n  dataToString(data) {\n    return this.createCSV(data, 'string');\n  }\n\n  /**\n   * Creates a Blob based on the provided data and configuration options.\n   * @param  {Array} data - An array of JSON objects that will be mapped to the Blob.\n   * @param  {String} writerType - ENUM for choosing the return type. Default to 'blo'\n   * @return {Object|String} - The Blob object (Is an instance of Blob, but typeof Object) or a String version of the CSV with newlines.\n   */\n  createCSV(data, writerType = 'blob') {\n    const {\n      columns: optionsColumns,\n      contentType: optionsContentType,\n      delimeter: optionsDelimeter, // delimeter is a common miss-spelling of “delimiter”\n      delimiter: optionsDelimiter,\n      formatters: optionsFormatters,\n      headers: optionsHeaders,\n      includeHeaders: optionsIncludeHeaders,\n    } = this.options || {};\n    const contentType = optionsContentType || 'text/csv';\n    const delimiter = optionsDelimeter || ',';\n    const formatters = optionsFormatters || {};\n    const getFormater = header => formatters[header] || (v => v);\n    const headerNames = optionsHeaders || {};\n    const headers = optionsColumns || Object.getOwnPropertyNames(data[0]);\n    const includeHeaders = optionsIncludeHeaders;\n    const writer = new WriterService(delimiter, contentType);\n\n    if (includeHeaders === undefined || includeHeaders) {\n      headers.forEach(header => writer.writeValue(headerNames[header] || header));\n      writer.writeLine();\n    }\n    data.forEach(row => {\n      headers.forEach(header => writer.writeValue(getFormater(header)(row[header])));\n      writer.writeLine();\n    });\n    return writerType === 'string' ? writer.toString() : writer.toBlob();\n  }\n  /**\n   * Triggers the download of the file.\n   * @param  {Object} blob - The blob to be downloaded.\n   * @param  {String} filename - Name of the file.\n   */\n  download(blob, filename) {\n    if (navigator.msSaveBlob) {\n      navigator.msSaveBlob(blob, filename);\n      return;\n    }\n    const link = document.createElement('A');\n    const url = URL.createObjectURL(blob);\n    link.href = url;\n    link.download = filename;\n    link.style.display = 'none';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  /**\n   * Creates and passes the blob and filename params to the download() method. In case of error, calls the onError callback (if provided) and prints a error mesage if devMode is enabled via options.\n   * @param  {Array} data - An array of objects to map and store.\n   */\n  downloadCSV(data) {\n    try {\n      const blob = this.createCSV(data, 'blob');\n      const filename = this.options.filename || `export-${new Date().getTime() / 1000 | 0}.csv`;\n      this.download(blob, filename);\n    } catch (err) {\n      if (this.options.devMode) {\n        console.error('Error downloading CSV. Send this log to the developers: \\n', err);\n      }\n      if (this.options.onError) {\n        this.options.onError(err);\n      }\n    }\n  }\n\n  /**\n   * Shorthand for constructor.\n   * @param  {Object} options\n   * @return {Object} - An instance of CSVExportService\n   */\n  static create(options) {\n    return new CSVExportService(options);\n  }\n\n  /**\n   * Shorthand for initialization and download() call.\n   * @param {Array} data - An array of objects to map and store.\n   * @param {Object} options\n   * @return {undefined}\n   */\n  static download(data, options = {}) {\n    return new CSVExportService(options).downloadCSV(data);\n  }\n}\n"],"names":["WriterService","delimiter","contentType","rows","string","safeString","replace","value","undefined","String","stringValue","sanitizeValue","needsQuotes","indexOf","test","currentRow","push","wrapWithQuotes","map","row","join","reduce","content","Blob","toString","type","length","CSVExportService","options","data","createCSV","writerType","optionsColumns","columns","optionsContentType","optionsDelimeter","delimeter","optionsDelimiter","optionsFormatters","formatters","optionsHeaders","headers","optionsIncludeHeaders","includeHeaders","getFormater","header","v","headerNames","Object","getOwnPropertyNames","writer","forEach","writeValue","writeLine","toBlob","blob","filename","navigator","msSaveBlob","link","document","createElement","url","URL","createObjectURL","href","download","style","display","body","appendChild","click","removeChild","Date","getTime","err","devMode","console","error","onError","downloadCSV"],"mappings":"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"}